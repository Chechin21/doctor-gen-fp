#lang scheme/base
(require racket/list)

(define (NODE n)
   (string->symbol (string-append "NODE"  (number->string n)))); вершина NODE с номером n

(define (cycle n);3 еcли n четно, 2 если нет
  (define (loop n result)
    (if (= n 1)
        result
        (loop (- n 1) (cons (list (NODE (- n 1)) (NODE n)) result))))
  (if (>= n 2)
      (loop n (list (list (NODE n) (NODE 1))))
      '() ))


(define (full n);n
  (define (loop n result)
    (if (= n 1) result
        (loop (- n 1) (foldl cons result (map (lambda (x) (list (NODE (+ 1 x)) (NODE n) )) (build-list (- n 1) values))))))
  (cond ((= n 1) '())
        ((> n 0) (loop n '()))))




(define (star n);n
  (define (loop n result)
    (if (= n 1) result
        (loop (- n 1) (cons (list (NODE 1) (NODE n)) result))))
  (if (= n 1) '()
      (loop n '())))

(define (path n);2
  (define (loop n result)
    (if (= n 1)
        result
        (loop (- n 1) (cons (list (NODE (- n 1)) (NODE n)) result))))
  (if (>= n 2)
      (loop n '())
      '() ))


;(define lst '(("NODE1" "1") ("NODE2" "2") ("NODE3" "1") ("NODE4" "2") ("NODE5" "1") ("NODE6" "2") ("NODE7" "1") ("NODE8" "2") ("NODE9" "1")))
;(with-output-to-file (string-append "/Users/ivan/Desktop/a12" (number->string number) ".in") #:exists 'append   (lambda() (println lst)))
 

;(check_path lst)
;(check_cycle lst)

(define (demo_gen lst num)
  '(#f))

(define (cycle_tests number)
  (cond (( = number 0)
      (println 'over))
        (else (let* ((v (random 3 20))
                      (p (random 1 14))
                      (res  (cycle v)))
                 (cond ((and (> p 2) (= 0 (modulo v 2)))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p )))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println 2))))
                       ; (if (equal? (car res) #t)
                       ;     (if (equal? (cadr res) 2)
                       ;         (if (equal? (check_path(caddr res)) #t)
                       ;             (println '(pass))
                       ;             (println '(cycle test not passed)))
                       ;         (println '(cycle test not passed)))
                       ;     (println '(cycle test not passed))))
                       ((and (> p 2) (= 1 (modulo v 2)))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println 3))))                      ;  (if (equal? (car res) #t)
                      ;      (if (equal? (cadr res) 3)
                      ;          (if (equal? (check_path(caddr res)) #t)
                      ;              (println '(pass))
                      ;              (println '(cycle test not passed)))
                      ;          (println '(cycle test not passed)))
                      ;      (println '(cycle test not passed))))
                       ((and (= p 2) (= 0 (modulo v 2)))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println 2))))
                       ; (if (equal? (car res) #t)
                       ;     (if (equal? (cadr res) 2)
                       ;         (if (equal? (check_path(caddr res)) #t)
                       ;             (println '(pass))
                       ;             (println '(cycle test not passed)))
                       ;         (println '(cycle test not passed)))
                       ;     (println '(cycle test not passed))))
                       ((and (= p 2) (= 1 (modulo v 2)))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #f) (println 0))))
                       ; (if (equal? (car res) #f)
                       ;     (println '(pass))
                       ;     (println '(cycle test not passed))))
                       ((= p 1)
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
                        (with-output-to-file (string-append "/Users/ivan/Desktop/fp/cycle_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #f) (println 0))))))
                      ;  (if (equal? (car res) #f)
                      ;      (println '(pass))
                      ;      (println '(cycle test not passed))))))
               (cycle_tests (- number 1)))))
;(cycle_tests 5)

(define (empty_tests number)
  (cond (( = number 0)
         (println 'over))
        (else
         (with-output-to-file (string-append "/Users/ivan/Desktop/fp/empty_tests_" (number->string number) ".in") #:exists 'append   (lambda() '() (println 100) ) )
         (with-output-to-file (string-append "/Users/ivan/Desktop/fp/empty_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #f) (println 0)))
         (empty_tests (- number 1)))))

(define (star_tests number)
  (cond (( = number 0)
         (println 'over))
        (else (let* ((v (random 2 10))
                     (p (random 2 15))
                     (res (star v) ))
                (cond ((> v p)
                       (with-output-to-file (string-append "/Users/ivan/Desktop/fp/star_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
                       (with-output-to-file (string-append "/Users/ivan/Desktop/fp/star_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println 2))))
                       ;(if (equal? (car res) #f)
                       ;    (println '(pass))
                       ;    (println '(star test not passed))))
                      ((<= v p)
                       (with-output-to-file (string-append "/Users/ivan/Desktop/fp/star_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println 2 ) ))
                       (with-output-to-file (string-append "/Users/ivan/Desktop/fp/star_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println 2))))))
                       ;(if (equal? (car res) #t)
                       ;    (if (equal? (cadr res) v)
                       ;        (println '(pass))
                       ;        (println '(star test not passed)))
                       ;    (println '(star test not passed))))))
              (star_tests (- number 1)))))

(define (full_tests number)
  (cond (( = number 0)
      (println 'over))
     (else (let* ((v (random 2 18))
             (p (random 1 100))
             (res (full v) ))
        (cond ((> v p)
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/full_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/full_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #f) (println 0))))
              ; (if (equal? (car res) #f)
              ;     (println '(pass))
              ;     (println '(star full not passed))))
              ((<= v p)
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/full_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/full_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println v))))))
               ;(if (equal? (car res) #t)
               ;    (if (equal? (cadr res) v)
               ;        (println '(pass))
               ;        (println '(full test not passed)))
               ;    (println '(full test not passed))))))
  (full_tests (- number 1)))))
  
  
(define (path_tests number)
  (cond ((= number 0 )
      (println 'over))
      (else (let* ((v (random 2 18))
             (p (random 1 4))
             (res (path v) ))
        (cond ((> p 1) 
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/path_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/path_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #t) (println 2))))
             ;  (if (equal? (car res) #t)
             ;      (if (equal? (cadr res) 2)
             ;          (if (equal? (check_path(caddr res)) #t)
             ;              (println '(pass))
             ;              (println '(path test not passed)))
             ;          (println '(path test not passed)))
             ;      (println '(path test not passed))))
              ((= p 1)
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/path_tests_" (number->string number) ".in") #:exists 'append   (lambda() (println res) (println p ) ))
               (with-output-to-file (string-append "/Users/ivan/Desktop/fp/path_tests_" (number->string number) ".out") #:exists 'append   (lambda() (println #f) (println 0))))))
             ;  (if (equal? (car res) #f)
             ;      (println '(pass))
             ;      (println '(path test not passed))))))
            (path_tests (- number 1)))))

(define (test)
  (println 'cycle_tests)
  (cycle_tests (random 10 30))
  (println 'path_tests)
  (path_tests (random 10 30))
  (println 'full_tests)
  (full_tests (random 10 30))
  (println 'star_tests)
  (star_tests (random 5 10)))
  ;(println 'empty_tests)
  ;(empty_tests (random 5 7)))

(test)

;(define res '(#f)); 2 (("NODE1" "1") ("NODE2" "2") ("NODE3" "1") ("NODE4" "2") ("NODE5" "1") ("NODE6" "2") ("NODE7" "1") ("NODE8" "2") ("NODE9" "1"))))                
;(equal? (car res) #t)



           
;(double 3) 
;(foldr cons '() (map (lambda (x) (list (NODE (+ 1 x)) (NODE n) )) (build-list (- n 1) values)))
;(remove-duplicates (build-list (random 1  5) (lambda (x) (random  5))))
;(define n 5)
;(foldr cons '() (map (lambda (x) (list (NODE (+ 1 x)) (NODE n) )) (build-list (random 1 n) (lambda (x) (random (- n 1))))))
;(random_graph 9)
;(random 1 1)